{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 39, "column": 0}, "map": {"version":3,"sources":["file:///Users/admin/Desktop/cesas-projeto---main/src/app/cards_infos/index.tsx"],"sourcesContent":["'use client'\nimport { useState } from 'react';\nimport './styles.css';\n\nexport default function Cards() {\n  const [abertos, setAbertos] = useState([false, false, false, false]);\n\n  const alternarCard = (index: number) => {\n    const novos = [...abertos];\n    novos[index] = !novos[index];\n    setAbertos(novos);\n  };\n\n  const dados = [\n    { titulo: \"Card 1\", descricao: \"Descrição do Card 1\", detalhes: \"Mais informações sobre o Card 1.\" },\n    { titulo: \"Card 2\", descricao: \"Descrição do Card 2\", detalhes: \"Mais informações sobre o Card 2.\" },\n    { titulo: \"Card 3\", descricao: \"Descrição do Card 3\", detalhes: \"Mais informações sobre o Card 3.\" },\n    { titulo: \"Card 4\", descricao: \"Descrição do Card 4\", detalhes: \"Mais informações sobre o Card 4.\" },\n  ];\n\n  return (\n    <section className='cards'>\n      <ul className='lista-cards'>\n        {dados.map((card, index) => (\n          <li key={index}>\n            <div className={`card ${abertos[index] ? 'aberto' : ''}`}>\n              <h2>{card.titulo}</h2>\n              <p>{card.descricao}</p>\n              <div className=\"detalhes\">\n                <p>{card.detalhes}</p>\n              </div>\n              <button className=\"botao-imagem houver-simulado\" onClick={() => alternarCard(index)}>\n                <img src='/assets/seta_baixo.svg' alt=\"Expandir card\" />\n              </button>\n            </div>\n          </li>\n        ))}\n      </ul>\n    </section>\n  );\n}\n"],"names":[],"mappings":";;;;AACA;AADA;;;;AAIe,SAAS;IACtB,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;QAAC;QAAO;QAAO;QAAO;KAAM;IAEnE,MAAM,eAAe,CAAC;QACpB,MAAM,QAAQ;eAAI;SAAQ;QAC1B,KAAK,CAAC,MAAM,GAAG,CAAC,KAAK,CAAC,MAAM;QAC5B,WAAW;IACb;IAEA,MAAM,QAAQ;QACZ;YAAE,QAAQ;YAAU,WAAW;YAAuB,UAAU;QAAmC;QACnG;YAAE,QAAQ;YAAU,WAAW;YAAuB,UAAU;QAAmC;QACnG;YAAE,QAAQ;YAAU,WAAW;YAAuB,UAAU;QAAmC;QACnG;YAAE,QAAQ;YAAU,WAAW;YAAuB,UAAU;QAAmC;KACpG;IAED,qBACE,8OAAC;QAAQ,WAAU;kBACjB,cAAA,8OAAC;YAAG,WAAU;sBACX,MAAM,GAAG,CAAC,CAAC,MAAM,sBAChB,8OAAC;8BACC,cAAA,8OAAC;wBAAI,WAAW,CAAC,KAAK,EAAE,OAAO,CAAC,MAAM,GAAG,WAAW,IAAI;;0CACtD,8OAAC;0CAAI,KAAK,MAAM;;;;;;0CAChB,8OAAC;0CAAG,KAAK,SAAS;;;;;;0CAClB,8OAAC;gCAAI,WAAU;0CACb,cAAA,8OAAC;8CAAG,KAAK,QAAQ;;;;;;;;;;;0CAEnB,8OAAC;gCAAO,WAAU;gCAA+B,SAAS,IAAM,aAAa;0CAC3E,cAAA,8OAAC;oCAAI,KAAI;oCAAyB,KAAI;;;;;;;;;;;;;;;;;mBARnC;;;;;;;;;;;;;;;AAgBnB","debugId":null}}]
}